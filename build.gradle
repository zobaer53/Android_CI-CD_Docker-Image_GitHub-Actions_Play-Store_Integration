import java.util.Properties
import java.io.FileInputStream
import java.io.ByteArrayOutputStream

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("com.github.triplet.play")
}

// Load keystore.properties file if it exists
val keystorePropertiesFile = rootProject.file("keystore.properties")
val keystoreProperties = Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(FileInputStream(keystorePropertiesFile))
}

// Define a function to determine if running in CI environment
fun isRunningOnCI(): Boolean {
    return System.getenv("CI") == "true"
}

// Get version name from Git tag if available
fun getVersionName(): String {
    // Check if CI environment has a tag set
    val ciTag = System.getenv("GITHUB_REF")
    if (ciTag != null && ciTag.startsWith("refs/tags/")) {
        return ciTag.substring("refs/tags/".length)
    }
    
    // If not in CI or no tag in CI, try to get from local Git
    val stdout = ByteArrayOutputStream()
    exec {
        commandLine("git", "describe", "--tags", "--abbrev=0")
        standardOutput = stdout
        isIgnoreExitValue = true  // Don't fail if there are no tags
    }
    val tag = stdout.toString().trim()
    
    // If we found a tag, use it, otherwise fallback to default
    return if (tag.isNotEmpty()) tag else "1.0.0"
}

// Get current version code and increment it
fun getVersionCode(): Int {
    val baseVersionCode = 2 // Default version code
    val stdout = ByteArrayOutputStream()
    exec {
        commandLine("git", "rev-list", "--count", "HEAD")
        standardOutput = stdout
        isIgnoreExitValue = true
    }
    val commitCount = stdout.toString().trim()
    
    // If we have a commit count, use it, otherwise increment the base
    return if (commitCount.isNotEmpty()) {
        try {
            commitCount.toInt() + baseVersionCode
        } catch (e: NumberFormatException) {
            baseVersionCode + 1
        }
    } else {
        baseVersionCode + 1
    }
}

android {
    namespace = "com.ex.calculatorapp"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.ex.calculatorapp"
        minSdk = 27
        targetSdk = 34
        versionCode = getVersionCode()
        versionName = getVersionName()

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        create("release") {
            if (keystorePropertiesFile.exists()) {
                storeFile = file(keystoreProperties["storeFile"] as String)
                storePassword = keystoreProperties["storePassword"] as String
                keyAlias = keystoreProperties["keyAlias"] as String
                keyPassword = keystoreProperties["keyPassword"] as String
            } else if (isRunningOnCI()) {
                // Use hardcoded signing info if running in CI without keystore.properties
                storeFile = rootProject.file("src/upload-keystore.jks")
                storePassword = "storepassword"
                keyAlias = "keyAlias"
                keyPassword = "keypassword"
            }
        }
    }

    buildTypes {
        getByName("release") {
            isDebuggable = false
            isMinifyEnabled = true
            isShrinkResources = true
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
            signingConfig = signingConfigs.getByName("release")
        }
        getByName("debug") {
            isDebuggable = true
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        viewBinding = true
    }
}

dependencies {

    implementation("androidx.core:core-ktx:1.9.0")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.8.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
}

// Configure Play Publisher plugin
play {
    // The ANDROID_PUBLISHER_CREDENTIALS environment variable is explicitly set in the workflow
    // The Play Publisher plugin will automatically pick it up, so we don't need to configure serviceAccountCredentials

    track.set("alpha") // Can be "internal", "alpha", "beta", or "production"
    defaultToAppBundles.set(true) // Generate AAB instead of APK
    // Add resolution strategy for version conflicts
    resolutionStrategy.set(com.github.triplet.gradle.androidpublisher.ResolutionStrategy.AUTO)
}
